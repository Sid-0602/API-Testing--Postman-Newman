{
	"info": {
		"_postman_id": "3e1fb340-a19e-455b-b458-3feecbdc410d",
		"name": "Simple Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27267493"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200! GET Successful!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response);\r",
							"console.log(response.status);\r",
							"\r",
							"pm.test(\"Status should be OK!\",()=>{\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"List of books\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200! GET Successful!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response);\r",
							"console.log(response.status)\r",
							"\r",
							"postman.setNextRequest(\"Fiction Books\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fiction Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200! GET Successful!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Non-Fiction Books\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?type=fiction",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Non-Fiction Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200! GET Successful!\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"const notFictionBooks = response.filter((book)=> book.available == true);\r",
							"pm.globals.set(\"bookId\", notFictionBooks[0].id);\r",
							"const book = notFictionBooks[0];\r",
							"\r",
							"//test for the above filter: \r",
							"pm.test(\"Non Fiction Book Found\",()=>{\r",
							"    pm.expect(book).to.be.an('Object');\r",
							"    pm.expect(book.available).to.eql(true);\r",
							"\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Get Single boook With ID\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?type=non-fiction",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single boook With ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200! GET Successful!\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Is in stock\",()=>{\r",
							"    pm.expect(response['current-stock']).to.be.above(0);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Register API Client\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"console.log(\"Staus for API Client Register: \",pm.response.status);\r",
							"console.log(\"JSON Data for API Client Register: \",response);\r",
							"\r",
							"pm.test(\"API Client Registered successfully!\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Post a Order\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\" : \"{{$randomFullName}}\",\r\n    \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api-clients",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post a Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"POST request Successful!\",()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"orderId\", response.orderId);\r",
							"postman.setNextRequest(\"Get All Orders\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": \"{{bookId}}\",\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET request Successfull!!\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"Get Order by Id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET request Successfull!!\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Update existing records\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/:orderid",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update existing records",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Data Updated Successfully\",()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,204]);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Delete Order\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n    \"customerName\":\"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/:orderid",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order deleted Successfully!\",()=>{\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/:orderid",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_token",
			"value": "7de52a135050fe22d029205b6a4b268015b6b3533257a040e078cf6514d192ce",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		}
	]
}